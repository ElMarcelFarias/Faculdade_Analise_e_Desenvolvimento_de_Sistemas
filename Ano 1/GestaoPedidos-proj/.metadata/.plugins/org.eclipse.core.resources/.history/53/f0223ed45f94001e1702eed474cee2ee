package Controller;
import Model.*;

public class Controladora {
	
	InfoPedidos info_pedidos = new InfoPedidos();
	
	
public void exibeMenu() {
		
		do {
		
			if(info_pedidos.getPedidos().isEmpty()) {
				opcoesSelecionada = EntradaSaida.menuInicialPrimario();
			} else {
				opcoesSelecionada = EntradaSaida.menuInicial();
			}
			
			switch(opcoesSelecionada) {
				case 0:
					Conta conta = new Conta();
					
					conta.setNomeConta(EntradaSaida.solicitarNome());
					conta.setTipo(EntradaSaida.solicitarTipoConta());
					
					do {
						conta.setCpf(EntradaSaida.solicitarCPF());
						
						if(conta.getCPF().length() != 11) {
							EntradaSaida.msgCPF();
						} 
						
					} while(conta.getCPF().length() != 11);
					
					 
					
					conta.setSaldo(EntradaSaida.solicitarSaldoInicial());
					banco.setNomes(conta.getNomeConta());
					banco.setContas(conta);
					
				break;
				
				case 1:
					if(banco.getContas().isEmpty()) {
						System.exit(0);
					}
					
					Movimentacao movimentacaoDeposito = new Movimentacao();
					index = EntradaSaida.selecionarConta(banco.getNomes());
					
					saldoAtual = EntradaSaida.coletaDeposito();
					banco.getContas().get(index).setSaldo(saldoAtual);
					
					movimentacaoDeposito.setMovimentacao("DepÃ³sito: R$: "+ saldoAtual + " - " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")));
					banco.getContas().get(index).setMovimentacoesDeposito(movimentacaoDeposito.getMovimentacao());
					banco.getContas().get(index).setMovimentacoesTotais(movimentacaoDeposito.getMovimentacao());
					
					EntradaSaida.mostraSaldo(banco.getContas().get(index).getSaldo(), banco.getContas().get(index).getNomeConta());
					
				break;
				
				case 2:
					Movimentacao movimentacaoSaque = new Movimentacao();
					int aux = 0;
					
					index = EntradaSaida.selecionarConta(banco.getNomes());
					
					do {
						saldoAtual = EntradaSaida.coletarSaque();
						saldo = banco.getContas().get(index).getSaldo();
						
						if((saldo + saldoAtual) > -1000) {
							banco.getContas().get(index).setSaldo(saldoAtual);
							aux = 1;
						} else {
							EntradaSaida.mensagemErrorNegativo((saldo + saldoAtual), saldoAtual);
						}
						
					}while(aux != 1);
					
					movimentacaoSaque.setMovimentacao("Saque: R$: "+ saldoAtual + " - " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")));
					banco.getContas().get(index).setMovimentacoesSaques(movimentacaoSaque.getMovimentacao());
					banco.getContas().get(index).setMovimentacoesTotais(movimentacaoSaque.getMovimentacao());
					EntradaSaida.mostraSaldo(banco.getContas().get(index).getSaldo(), banco.getContas().get(index).getNomeConta());
					
				break;
				
				case 3:
					
					index = EntradaSaida.selecionarConta(banco.getNomes());
					EntradaSaida.mostraSaldo(banco.getContas().get(index).getSaldo(), banco.getContas().get(index).getNomeConta());
					
				break;
				
				case 4:
					
					index = EntradaSaida.selecionarConta(banco.getNomes());
					
					String nome = banco.getContas().get(index).getNomeConta();
					int tipoConta = banco.getContas().get(index).getTipo();
					double saldo = banco.getContas().get(index).getSaldo();
					String cpf = banco.getContas().get(index).getCPF();
					
					EntradaSaida.mostraInformacoes(tipoConta, saldo, cpf, nome);
					
				break;
				
				case 5:
					index = EntradaSaida.selecionarConta(banco.getNomes());
					ArrayList<String> movimentacoesTotais =  banco.getContas().get(index).getMovimentacoesTotais();
					
					EntradaSaida.mostraMovimentacao(movimentacoesTotais,banco.getContas().get(index).getNomeConta());
					
				break;
				
				case 6:
					index = EntradaSaida.selecionarConta(banco.getNomes());
					ArrayList<String> movimentacoesDeposito =  banco.getContas().get(index).getMovimentacoesDeposito();
					
					EntradaSaida.mostraMovimentacao(movimentacoesDeposito,banco.getContas().get(index).getNomeConta());
					
				break;
				
				case 7:
					index = EntradaSaida.selecionarConta(banco.getNomes());
					ArrayList<String> movimentacaoSaque1 =  banco.getContas().get(index).getMovimentacoesSaques();
					
					EntradaSaida.mostraMovimentacao(movimentacaoSaque1,banco.getContas().get(index).getNomeConta());
				break;
				
				case 8:
					EntradaSaida.mensagemEncerraPrograma();
					System.exit(0);
				break;
			}
			
			
		} while(true);
			
		
	}

}
